// Package cardgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cardgen

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// CardRequest defines model for CardRequest.
type CardRequest struct {
	Cvv  int    `json:"cvv"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// CardResponse defines model for CardResponse.
type CardResponse struct {
	Cvv  *int   `json:"cvv,omitempty"`
	Id   int    `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// CreateApiV1CardJSONRequestBody defines body for CreateApiV1Card for application/json ContentType.
type CreateApiV1CardJSONRequestBody = CardRequest

// UpdateApiV1CardJSONRequestBody defines body for UpdateApiV1Card for application/json ContentType.
type UpdateApiV1CardJSONRequestBody = CardRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list
	// (GET /api/v1/cards/)
	GetApiV1Cards(c *fiber.Ctx) error
	// Create
	// (POST /api/v1/cards/)
	CreateApiV1Card(c *fiber.Ctx) error
	// Get
	// (GET /api/v1/cards/{card_id})
	GetApiV1Card(c *fiber.Ctx, cardId int) error
	// Update
	// (PUT /api/v1/cards/{card_id})
	UpdateApiV1Card(c *fiber.Ctx, cardId int) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetApiV1Cards operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Cards(c *fiber.Ctx) error {

	return siw.Handler.GetApiV1Cards(c)
}

// CreateApiV1Card operation middleware
func (siw *ServerInterfaceWrapper) CreateApiV1Card(c *fiber.Ctx) error {

	return siw.Handler.CreateApiV1Card(c)
}

// GetApiV1Card operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Card(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "card_id" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "card_id", c.Params("card_id"), &cardId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter card_id: %w", err).Error())
	}

	return siw.Handler.GetApiV1Card(c, cardId)
}

// UpdateApiV1Card operation middleware
func (siw *ServerInterfaceWrapper) UpdateApiV1Card(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "card_id" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "card_id", c.Params("card_id"), &cardId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter card_id: %w", err).Error())
	}

	return siw.Handler.UpdateApiV1Card(c, cardId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/api/v1/cards/", wrapper.GetApiV1Cards)

	router.Post(options.BaseURL+"/api/v1/cards/", wrapper.CreateApiV1Card)

	router.Get(options.BaseURL+"/api/v1/cards/:card_id", wrapper.GetApiV1Card)

	router.Put(options.BaseURL+"/api/v1/cards/:card_id", wrapper.UpdateApiV1Card)

}
