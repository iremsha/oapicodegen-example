// Package bankgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package bankgen

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// BankRequest defines model for BankRequest.
type BankRequest struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// BankResponse defines model for BankResponse.
type BankResponse struct {
	Address string `json:"address"`
	Id      int    `json:"id"`
	Name    string `json:"name"`
	Owner   Owner  `json:"owner"`
}

// BanksCardResponse defines model for BanksCardResponse.
type BanksCardResponse struct {
	Cvv  int    `json:"cvv"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// Owner defines model for Owner.
type Owner struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// CreateApiV1BankJSONRequestBody defines body for CreateApiV1Bank for application/json ContentType.
type CreateApiV1BankJSONRequestBody = BankRequest

// UpdateApiV1BankJSONRequestBody defines body for UpdateApiV1Bank for application/json ContentType.
type UpdateApiV1BankJSONRequestBody = BankRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list
	// (GET /api/v1/banks/)
	GetApiV1Banks(c *fiber.Ctx) error
	// Create
	// (POST /api/v1/banks/)
	CreateApiV1Bank(c *fiber.Ctx) error
	// Get
	// (GET /api/v1/banks/{bank_id})
	GetApiV1Bank(c *fiber.Ctx, bankId int) error
	// Update
	// (PUT /api/v1/banks/{bank_id})
	UpdateApiV1Bank(c *fiber.Ctx, bankId int) error
	// Get list
	// (GET /api/v1/banks/{bank_id}/cards)
	GetApiV1BankCards(c *fiber.Ctx, bankId int) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetApiV1Banks operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Banks(c *fiber.Ctx) error {

	return siw.Handler.GetApiV1Banks(c)
}

// CreateApiV1Bank operation middleware
func (siw *ServerInterfaceWrapper) CreateApiV1Bank(c *fiber.Ctx) error {

	return siw.Handler.CreateApiV1Bank(c)
}

// GetApiV1Bank operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Bank(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "bank_id" -------------
	var bankId int

	err = runtime.BindStyledParameterWithOptions("simple", "bank_id", c.Params("bank_id"), &bankId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter bank_id: %w", err).Error())
	}

	return siw.Handler.GetApiV1Bank(c, bankId)
}

// UpdateApiV1Bank operation middleware
func (siw *ServerInterfaceWrapper) UpdateApiV1Bank(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "bank_id" -------------
	var bankId int

	err = runtime.BindStyledParameterWithOptions("simple", "bank_id", c.Params("bank_id"), &bankId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter bank_id: %w", err).Error())
	}

	return siw.Handler.UpdateApiV1Bank(c, bankId)
}

// GetApiV1BankCards operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1BankCards(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "bank_id" -------------
	var bankId int

	err = runtime.BindStyledParameterWithOptions("simple", "bank_id", c.Params("bank_id"), &bankId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter bank_id: %w", err).Error())
	}

	return siw.Handler.GetApiV1BankCards(c, bankId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/api/v1/banks/", wrapper.GetApiV1Banks)

	router.Post(options.BaseURL+"/api/v1/banks/", wrapper.CreateApiV1Bank)

	router.Get(options.BaseURL+"/api/v1/banks/:bank_id", wrapper.GetApiV1Bank)

	router.Put(options.BaseURL+"/api/v1/banks/:bank_id", wrapper.UpdateApiV1Bank)

	router.Get(options.BaseURL+"/api/v1/banks/:bank_id/cards", wrapper.GetApiV1BankCards)

}
